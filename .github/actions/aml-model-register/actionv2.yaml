name: Registering model
description: 'Registers a new model in the workspace.'

inputs:
  name:
    description: 'Name of the model to register'
    required: true
  description:
    description: 'Description of the model. It can be any string.'
    required: false
    default: ''
  fromJob:
    description: 'Indicates if the model file will be retrieved from the output of a job. Defaults to `false`. If `true`, then `jobName` should be specified. If `false`, the `modelPath` should be a local file.'
    required: true
    default: 'false'
  fromAnotherWorkspace:
    description: 'Indicates if the model is registered in another workspace'
    required: false
    default: 'false'
  jobName:
    description: 'Name of the job from where the model file should be retrieved.'
    required: false
    default: ''
  modelPath:
    description: 'Path to the model file. If `fromJob` is `true`, this is the path inside of the artifacts generated by the run (including the outputs folder). Otherwise it is a local path in the repository.'
    required: true
  modelType:
    description: 'Type of the model to register. Possible values are custom_model, mlflow_model and triton_model'
    required: true
    default: 'custom_model'
  workspaceName:
    description: 'Name of the workspace to work against.'
    required: true
  resourceGroup:
    description: 'Name of the resource group where the workspace is placed.'
    required: true

runs:
  using: "composite"
  steps:
    - name: Registering model
      shell: bash
      run: |
        if ${{ inputs.fromJob }}; then
          if ${{ inputs.fromAnotherWorkspace }}; then
            echo "::debug::Downloading assets from job ${{ inputs.jobName }}"
            az ml job download --name ${{ inputs.jobName }} --resource-group ${{ inputs.resourceGroup }} --workspace-name ${{ inputs.workspaceName }}
            echo "::debug::$(ls)"

            MODEL_PATH="${{ inputs.jobName }}/${{ inputs.modelPath }}"
          else
            MODEL_PATH="azureml://jobs/${{ inputs.jobName }}/outputs/artifacts/${{ inputs.modelPath }}"
          fi
        else
          if test -f "${{ inputs.jobName }}/${{ inputs.modelPath }}"; then
            echo "::error::File ${{ inputs.modelPath }} not found."
            exit 1
          fi

          MODEL_PATH="${{ inputs.modelPath }}"
        fi

        echo "::debug::Creating model from path $MODEL_PATH"
        az ml model create --name "${{ inputs.name }}" --description "${{ inputs.description }}" --type "${{ inputs.modelType }}" --path $MODEL_PATH --resource-group ${{ inputs.resourceGroup }} --workspace-name ${{ inputs.workspaceName }}